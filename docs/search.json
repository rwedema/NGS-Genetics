[{"path":"index.html","id":"about","chapter":"About","heading":"About","text":"syllabus module 2.1.1 NGS Genetics. bookdown document provide enough background material exercises complete Case part module. Also links genetics presentations given can found schedule .","code":""},{"path":"index.html","id":"usage","chapter":"About","heading":"Usage","text":"Chapters divided subjects. subject (chapter) last week complete. new information week 4 rest weeks spend finishing analysis selected case preparing genetics exam.","code":""},{"path":"index.html","id":"learning-outcomes","chapter":"About","heading":"Learning outcomes","text":"good understanding concepts central dogma, different types macromolecules, enzymes, can describe interconnections.can identify various mechanisms gene regulation predict effects different mutations gene expression.familiar different genome structures can detect, filter, annotate NGS (Next-Generation Sequencing) dataset using appropriate tools techniques.clear understanding quality requirements NGS data, depending NGS technique used objective. can also apply tools assess improve quality data.aware available tools algorithms mapping NGS reads reference genome, can justify one best suited given dataset question.can provide arguments present choices made process achieving high-quality mapping.","code":""},{"path":"index.html","id":"end-products","chapter":"About","heading":"End Products","text":"end products course following two items:genetics exam (weight 3/5)Analysis selected case (weight 2/5)two items weighted combined get single final grade. See also Rubric learning outcomes graded.","code":""},{"path":"index.html","id":"rubric","chapter":"About","heading":"Rubric","text":"","code":""},{"path":"index.html","id":"schedule","chapter":"About","heading":"Schedule","text":"subjects discussed genetics lessons can found  book. following chapters discussed genetics lessons:Biological macromolecules: 3.4, 3.5DNA structure function (en mutatie): 14.2, 14.3, 14.4, 14.5, 14.6Genes Proteins: 15.1, 15.2, 15.3, 15.4, 15.5Gene expression: 16.1, 16.2, 16.3, 16.4, 16.5, 16.6, 16.7Biotechnology genomics: 17.1, 17.2, 17.3, 17.4 (part regarding metagenomics), 17.5","code":""},{"path":"intro.html","id":"intro","chapter":"Week 1 Intro NGS and Genetics Project","heading":"Week 1 Intro NGS and Genetics Project","text":"project learn bioinformatic basics analyse Next-Generation Sequence (NGS) data patients diagnosed either cardiomyopathy Medulloblastoma. Using case discover genetic variations present genomic data patient suspected condition. end-goal identify report genomic variations possibly disease causing. course material can found document, theory, lot links resources, questions assignments.","code":""},{"path":"intro.html","id":"cardiomyopathy","chapter":"Week 1 Intro NGS and Genetics Project","heading":"1.1 Cardiomyopathy","text":"many diseases, one causes cardiomyopathy combination genetic mutation(s). According Wikipedia, following forms cardiomyopaty genetic base:Hypertrophic cardiomyopathyArrhythmogenic right ventricular cardiomyopathy (ARVC)LV non-compactionIon ChannelopathiesDilated cardiomyopathy (DCM)Restrictive cardiomyopathy (RCM)human genetics department University Medical Center Groningen diagnoses patients suspected suffer cardiomyopathy. part diagnosis, patients genome compared set reference genes known involved disease (called gene panel). variations found checked compared known variants classify score severity. Using variations type (dilated, restrictive, etc.) disease severe can diagnosed, combined regular data sources (physical exam, EKG, etc.).","code":""},{"path":"intro.html","id":"medulloblastoma","chapter":"Week 1 Intro NGS and Genetics Project","heading":"1.2 Medulloblastoma","text":"Medulloblastoma type brain cancer occurs often children also common type cancer children. cancer starts lower back part brain, called cerebellum. cerebellum involved muscle coordination, balance, movement. type embryonal tumor, means starts fetal (embryonic) cells brain. cancer cells immature often look like embryonic cells microscope. cancer can spread areas brain spinal cord. cause medulloblastoma known. caused head injury exposure radiation. passed families. cancer common children weakened immune system certain genetic problems, Gorlin syndrome Turcot syndrome.article accompanying available data set specifies multiple subtypes. project aims identify subtypes available samples.“Traditionally, MB stratified four histopathological subtypes based histological appearance: Classic, Large Cell/Anaplastic, Desmoplastic/Nodular (DNMB) MB Extensive Nodularity (MBEN)3,4. Additionally, last decade, four molecular groups (WNT, SHH, Group 3, Group 4) together various subgroups defined now generally replace classic histopathological stratification 2021 classification central nervous system (CNS) tumors”Article: “Compartments medulloblastoma extensive nodularity connected differentiation along granular precursor lineage”; https://www.nature.com/articles/s41467-023-44117-xData set: https://www.ncbi.nlm.nih.gov/biosample?LinkName=bioproject_biosample_all&from_uid=1044021Data acquisition: “Libraries enriched hybrid capture custom biotinylated RNA oligo pools covering exons 130 cancer-associated genes. Paired-end sequencing performed using NextSeq 500 (Illumina).”Gene panels (listed genes included BED-file available Galaxy):\nhttps://www.ncbi.nlm.nih.gov/gtr/tests/607978/\nhttps://www.preventiongenetics.com/testInfo?val=Medulloblastoma-Panel\nhttps://repositorium.sdum.uminho.pt/bitstream/1822/57968/1/Leal_et_al-2018-Neuropathology.pdf\nhttps://www.ncbi.nlm.nih.gov/gtr/tests/607978/https://www.preventiongenetics.com/testInfo?val=Medulloblastoma-Panelhttps://repositorium.sdum.uminho.pt/bitstream/1822/57968/1/Leal_et_al-2018-Neuropathology.pdfNote article specifies 130 cancer-associated genes refer list. links add 122 genes total genes related (multiple types ) cancer. Subsequent data analysis performed identify genes actually captured exome sequencing.","code":""},{"path":"intro.html","id":"tools","chapter":"Week 1 Intro NGS and Genetics Project","heading":"1.3 Tools","text":"project work many different software tools replicate genetic diagnoses process, available either download computer now using. tools going create ! tools however perform important steps analysis process involve:checking quality input data,mapping data reference genome (comparing ‘known’ data),finding variations respect reference andscoring found variations probabilty disease causing.Normally steps involve many seperate tools need run commandline, however course using worflow manager tools available can joined together form logical steps analysis process. workflow manager used course Galaxy (wikipedia, website), worflow managers exist : CLC Bio, Taverna, Nextgene SnakeMake. likely encounter one workflow managers future professional carreer, many scientific laboratories biomedical research help tools organised workflow managers.Next advantage coupling multiple tools together workflow, Galaxy ideal translation often hard--use commandline tools easy--use large audience offering simple graphical interfaces.Actually one reasons following course become proficient also using commandline tools combining workflow (also called pipeline) non-technical researchers can use !Week 1 course starts explaining Galaxy can use analyze data, first introduce discuss data working .","code":""},{"path":"intro.html","id":"data","chapter":"Week 1 Intro NGS and Genetics Project","heading":"1.4 Data","text":"bioinformatician often create data analyze come lab - project - sequencer. sequencer (Illumina Miseq NextSeq youtube, many sequencing technologies exist learn seperate lecture) generates sequencing data biological sample. Sequencing data cases introduced module come genome data. different module (2.1.2), also learn work transcriptomics data (RNA).first step performing called sequencing run sample-preparation. project fase used filter isolated DNA exons genes interest (consisting one exons EXpressed regiONs) kept, method called exome sequencing.targeting specific genes (called gene panel) omit bulk genome, important consequence. human genome contains 26.564 genes 233.785 exons combined (looking human genome build 2003). can get data selectively targeting genes interest, instead trying read whole exome. Can think reason true?DNA included genes interest thus also introns (somewhere around 98% DNA) sequenced, therefore total ~3.2 billion basepairs small fraction actually sequenced. greatly depends case selected number genes present gene panel, typically small percentage usually less 1% genome.actual data using stored relatively simple text-files containing sequenced letters (, C, G T) along data primarily used describe quality sequenced base. Given sequencing technology used generate sequencing data, limited machine’s technical capabilities generate data. case MiSeq NextSeq, means - unfortunately - long continuous sequences can produced. files generated sequencers contain millions short sequences (~150 basepairs , called sequence read) particular order.challenge using data answer initial question (specific variations (mutations) responsible acquiring disease) find sequences originate can compare patients’ sequence sequence healthy individual. comparison can find variation thus begin answering question.","code":""},{"path":"intro.html","id":"analysis","chapter":"Week 1 Intro NGS and Genetics Project","heading":"1.5 Analysis","text":"course consists number chapters like can worked -order. first section documents shows analysis steps next. also shows tools going use assignments included.note document first week long contain many assignments. purpose since goal week primarily understand:goal course \ndisease looking ?\nquestion(s) want answer?\ndisease looking ?question(s) want answer?tools using\nGalaxy website? follow tutorial get familiar \nkind tools available Galaxy?\nGalaxy website? follow tutorial get familiar itwhat kind tools available Galaxy?data use throughout course\ndata generated?\ndata generated?analysis steps needed answer research question?Note assignments:good scanning documents can easily spot actual assignments first chapter complete two hours (note; challenge!). However, ask answer explain questions probably hard time. summarize, make sure general theory shown clear end chapter.Either follow links external resources, use google (works pretty well) search terms techniques YouTube. Without knowledge, manage follow steps first weeks surely struggle later need make decisions . final grade based complete assignments, also level understanding show lab journal presentation.begin practical new week first group discussing previous week.","code":""},{"path":"intro.html","id":"literature","chapter":"Week 1 Intro NGS and Genetics Project","heading":"1.6 Literature","text":"explicit book case text need read, lot online material available use encounter unknown terms concepts. article titled ‘Review Current Methods, Applications, Data Management Bioinformatics Analysis Whole Exome Sequencing’ discusses complete process analyzing raw sequencing data variant analysis goes beyond scope project good read.Besides practical, lectures Theory Bioinformatics module also greatly add understanding techniques, data challenges need solve.","code":""},{"path":"intro.html","id":"reporting","chapter":"Week 1 Intro NGS and Genetics Project","heading":"1.7 Reporting","text":"help work trough document prepare best possible final presentation best keep track analysis steps findings.already learned “Wetenschappelijke Cyclus” module, type document called R Markdown suitable purpose. document can write combination text code results (tables figures) included well. Therefore, suitable lab-journal course.imposed rules report progress since comparable normal written report (chapters called ‘introduction’, ‘results’, etc.), just try keep organized, clearly state important results belong . note however use figures tables (please !), provide clear caption explain showing. logfile part grading (next module !), just convenient way keep track steps results.","code":""},{"path":"intro.html","id":"galaxy-server","chapter":"Week 1 Intro NGS and Genetics Project","heading":"1.7.1 Galaxy Server","text":"main ‘tool’ ((web)platform) containing actual tools performing analysis use course. Since spending lot time Galaxy start learning use . Note lot Galaxy servers available use worldwide server probably contains different set implemented tools. Typically, different labs Galaxy server host just tool important particular lab run analyses. main galaxy server available https://usegalaxy.org fine learning galaxy (section ) won’t used later (see section ) register server.","code":""},{"path":"intro.html","id":"learning-galaxy","chapter":"Week 1 Intro NGS and Genetics Project","heading":"Learning Galaxy","text":"Start following beginner tutorial available Galaxy Training collection - old - Galaxy Learn wiki page. First, browse page see available (can used later ) choose interesting (beginners!) tutorial try. tutorials either relavant --date, need learn least following concepts:Creating new history rename current - empty - historyUploading data local fileFinding/ selecting tool\nSelecting input data tool\nchanging settings tool\nExecuting tool\nSelecting input data toolchanging settings toolExecuting toolUsing History \nView tool-output\nRe-run tool\nDelete elements\nSelect copy elements new history\nView tool-outputRe-run toolDelete elementsSelect copy elements new historyAnd - preferably - something creating workflow\nitem explained later \nitem explained later tooYou need report tutorial followed/ video tutorial watched.","code":""},{"path":"intro.html","id":"bioinformatics-galaxy-server","chapter":"Week 1 Intro NGS and Genetics Project","heading":"Bioinformatics Galaxy Server","text":"completing tutorial, switch Galaxy server use throughout course available : https://galaxy.bioinf.nl contains collection course specific tools.Galaxy server host different one ’ve used tutorial. Different sense means containing different collection available software tools. tools using course can found using search tools input field, can found top left corner Galaxy.tools however installed bundles category therefore easiest method finding tool need simply enter name search tools field top-left corner.","code":""},{"path":"intro.html","id":"data-and-quality-control","chapter":"Week 1 Intro NGS and Genetics Project","heading":"1.7.2 Data and quality control","text":"project patient data patients suspectedly suffering either Cardiomyopathy Medulloblastoma investigating. patient data consists next-generation Illumina reads (MiSeq NextSeq) captured exomes panel given size (small number genes). example, looking gene panel used diagnose heart disease cardiomyopathy, sequence data available “” 55 genes 26k genes. (CARDIO panel, see table NCBI product page - note lists 51 ) likely involved disease. total length captured exons 55 genes 320,000 bases. , , just small fraction complete exome lenght.first step thorough quality check available data, first need take close look data format used.","code":""},{"path":"intro.html","id":"fastq-format","chapter":"Week 1 Intro NGS and Genetics Project","heading":"1.7.3 FASTQ format","text":"mentioned , great portion data produced computational biology called Next-Generation Sequencers. machines read DNA RNA material write sequences file (different machines techniques used create data presented Theory Bioinformatics classes).file format often find FASTQ format. can recognize file ’s extention .fastq .fq. FASTQ file simple text file read bases together predicted quality stored.find two (shortened) reads coming Illumina next-generation sequencer. Keep mind typical run NGS machine millions short sequences! theoretical maximum number reads given size determined underlying technique used, greatly differs different techniques.Read 1:@M01785:20:000000000-A3F6F:1:1101:16810:1655 1:N:0:2 NTCATGTACGGTCAGGATGGACGCACTCAACATTTTCAAGTTATTACTCCTTCAACTCAAAACT … + #>>1A1B3B11BAEFFBECA0B000EEGFCGBFGGHH2DEGGHGFFFGFFHHFGBGEFFFFF …Read 2:@M01785:20:000000000-A3F6F:1:1101:12839:1664 1:N:0:2  TATATCTATGTCATTTTTTTCTCAATAATACTAAGAGAAAGAAGGCAACTCAAGGATCCTATTAATCCTTTA … + 1>1AFFFD3DDDGGGGGGGGGHF3FDFGFHHFB1110FF10000FGGGHHDC110FEGGBGHFFHFHHHHGBFH …read constists :\nfirst line describing machine run , chip identifier actual coordinates chip base read\n\nactual read sequence\n\nplus sign\n\npredicted read base quality ASCII value\ndifference widely known FASTA format mainly addition Quality line (green). , given quality-characters, determine sequences good sequences? character quality line corresponds numerical quality score, can looked called ASCII tables.Note: can think intermediate ASCII table used calculate quality scores?Lets take closer look first sequence . first 10 bases : NTCATGTACG quality scores bases : #>>1A1B3B1. can now look quality characters ASCII table.look example first character #, find value 35 ASCII table. Illumina reads subtract 33 (called offset, different techniques may use different offset) value. end : 35 - 33 = 2. score first base N 2. score called Phred score. Lets also look Phred score second base T ASCII character >. > character translates value 62. subtract 33 value calculate Phred score. 62 - 33 = 29.Phred quality score really mean? score indicates probability base call erroneous. quality score Q logarithmically related probability incorrect base call: \\[ Q = log10P \\] \\[ P = 10^{(-Q/10)} \\]. calculate probability first base incorrectly called, can calculate like : \\[ Q = 2 \\rightarrow P = 10^{(-2/10)} \\rightarrow P = 0,63 \\]equates 63%. can also look probability first base correct, subtract number 1. probability first base correct : \\[ 1 - 0,63 = 0,37 \\] 37%. probability second base correctly called : \\[ 1 -\n(10^{-29/10}) = 0,9987 \\] 99,87% accuracy. general can say Phred-score 30 acceptable (99,9% accuracy) first two bases fail get.Complete table .","code":""},{"path":"intro.html","id":"quality-control","chapter":"Week 1 Intro NGS and Genetics Project","heading":"1.7.4 Quality Control","text":"need load patient data going work project. patient data stored network first need load Galaxy History work . click ‘Upload Data’ button next ‘Choose local files’ button bottom popup. , can browse folder network contain samples : /commons/Themas/Thema05/2024/ Note Cardiomyopathy, use CM-DNASeq folder Medulloblastoma, use MB-DNASeq folder.can see case consists two files. forward reverse reads split two files (paired-end sequencing). files R1 _1 name forward reads reverse reads R2 _2 name, remember tools require select proper file.example Medulloblastoma disease case, can select read files Medulloblastoma sample, SRR29613194. Galaxy automatically tries detect file format add history, often using ’s file extension. case, need make sure Galaxy proper format selected fastqsanger. Sanger part format refers phred quality scoring method used file exist multiple scoring methods. Without correct data type tool FastQC (see ) doesn’t know read sufficient quality worse, qualifies reads incorrectly. Select proper type drop-menu upload files.uploaded sequence data history, available work . went correct, now see two sequence files History Galaxy.start analyse NGS data important get feeling data. data look like? quality data? (although can) want draw conclusions low quality data. common errors data can corrected. able , first need identify wrong data. look many (quality) aspects imported data sets, going start tool named FastQC. Tools panel, search FastQC tool (can also found FASTQ Quality Control section. settings FastQC tool appear middle section. help usually shown open tool well scientific literature associated tool references. FastQC tool can load short read data history. Also contaminant list can uploaded (example primers pre-process step can sometimes end data give sort problems downstream). submodule part FastQC setting can specify subparts tools need run. now going bother settings short read data.Select Multiple Datasets Short read data current history press Execute.clicked Execute, jobs started added History. item history number increments one new item. jobs finished appear green. jobs finished, four new items appeared History. look closely, can see FastQC run data 1 2 History. FastQC generated two types reports: RawData Webpage. look Webpages short read data sets. Click View Data (eye-icon) webpage output data 1In middle panel webpage results data 1 open. summary quality checks performed visable gives quick overview checks need attention.Report total number sequences analysed, number sequences flagged poor quality, sequence length GC percentage. Next, look per base sequence quality, plot sequence position plotted x-axis base quality plotted y-axis. bar plot represents distribution sequences analysed data set position. Also look Webpage data 2 compare plots. see differences plots use data set analysis?information box plot, please look : https://en.wikipedia.org/wiki/Box_plotNow took first look data quality, modify data make sure get data highest quality perform analysis . likely current data contains (many) reads low quality short performing next steps. following two chapters finalize look data quality performing read trimming remove reads (parts reads) low quality. data set acceptable quality perform next important analysis step; read mapping (week 2), visualize resulting mapping perform pileup operation (week 3.can see FastQC report, read quality drops end reads (normal Illumina protocol specific sequencing technology used!). Can find happening?Also spread quality positions may greater like see. next step going remove reads low quality just short used. make DNA available sequenced, primers annealed DNA. primers also removed.Tools menu select Trimmomatic tool.Check paired end data selected.\nSelect Pair Datasets Input Type (default) select patient R1 R2 files.\nPerform initial IlluminaCLIP step select TruSeq3 (paired-ended, miSeq HiSeq) adapters.\nTrimmomatic operation select Sliding window trimming choose 4 bases average across, quality 20 (minimum).\nClick plus sign (Insert Trimmomatic Operation button) Select Drop reads specified length\nSet minimum read length 70 (can think reason want many short reads?)\nNote: protocol used Cardiomyopathy data (paired-end 150bp reads). using data shorter reads (50, 75 100bp), change setting accordingly (30, 40, 50 respectively).\n\nExecute tool.\nSelect Pair Datasets Input Type (default) select patient R1 R2 files.Perform initial IlluminaCLIP step select TruSeq3 (paired-ended, miSeq HiSeq) adapters.Trimmomatic operation select Sliding window trimming choose 4 bases average across, quality 20 (minimum).\nClick plus sign (Insert Trimmomatic Operation button) Select Drop reads specified length\nSet minimum read length 70 (can think reason want many short reads?)\nNote: protocol used Cardiomyopathy data (paired-end 150bp reads). using data shorter reads (50, 75 100bp), change setting accordingly (30, 40, 50 respectively).\nClick plus sign (Insert Trimmomatic Operation button) Select Drop reads specified lengthSet minimum read length 70 (can think reason want many short reads?)Note: protocol used Cardiomyopathy data (paired-end 150bp reads). using data shorter reads (50, 75 100bp), change setting accordingly (30, 40, 50 respectively).Execute tool.Trimmomatic give 4 new files output, read help Trimmomatic tool (can found tool settings Galaxy) understand file contains. next steps analysis important forward reverse reads order files. reason one forward reverse reads removed one files, two files order . reason Trimmomatic remove reads files. one read threshold removed, ’s paired partner written unpaired output file (threshold). output find 4 files: one forward paired one reverse paired (still order) one unpaired forward one unpaired reverse. Rename two files use next step something like Trimmed Reads [ID] R1 00X etc.Note Reporting Galaxy Tool ParametersAn important aspect lab journal document reproducible research. order , need properly document tool parameters used tools operating data. especially important tools modify data, like Trimmomatic. Tools often many parameters going manually write . Instead, copy ‘Tool Parameter’ table Galaxy tool log paste lab journal. suggestion accomplish :Click ‘’ icon history item Trimmomatic tool (named ‘Dataset Details’).Select complete ‘Tool Parameters’ table (including header, see image example).RStudio, click ‘Visual’ button top left markdown documentPaste copied table markdown document.Modify table needed - preferably - return ‘Source’ editor.final result similar table (rows removed):Report number reads removed data set.\nCreate new FastQC plots Per Base Sequence Quality (cleaned, paired data).\nCompare plots original uncleaned data report differences.\nCreate new FastQC plots Per Base Sequence Quality (cleaned, paired data).Compare plots original uncleaned data report differences.Perform multiple FASTQ cleaning runs (time original data!).\nChange setting report number reads removed.\nCreate save Per Base Sequence Quality plots run.\nReport (table instance) effect setting Trimmomatic tool.\nPick best (combination ) settings copy R1 R2 trimmed data sets new history Galaxy, data used next analysis step.\nPlease remove unused output Trimmomatic previous history, might take gigabytes space. delete files (can also ‘undeleted’) just marked actual deletion months.\nChange setting report number reads removed.Create save Per Base Sequence Quality plots run.Report (table instance) effect setting Trimmomatic tool.Pick best (combination ) settings copy R1 R2 trimmed data sets new history Galaxy, data used next analysis step.Please remove unused output Trimmomatic previous history, might take gigabytes space. delete files (can also ‘undeleted’) just marked actual deletion months.","code":""},{"path":"mapping.html","id":"mapping","chapter":"Week 2 Read Mapping","heading":"Week 2 Read Mapping","text":"Now know quality NGS patient data corrected reads low quality short read lengths, can continue mapping reads reference genome. step use human genome reference map cleaned reads using tool BWA. mapping reads can look variations reference patient.","code":""},{"path":"mapping.html","id":"mapping-with-bwa","chapter":"Week 2 Read Mapping","heading":"Mapping with BWA","text":"starting mapping data human reference genome, can calculate important statistics see can achieve data.","code":""},{"path":"mapping.html","id":"assignment-week-2","chapter":"Week 2 Read Mapping","heading":"2.1 Assignment week 2","text":"\nminimal average coverage (read depth) 20,\n\nread length determined data set (instance read pair read 75 150 bases),\n\nhuman genome size 3,137,161,264 bases \n\ntarget region (captured region, size gene panel) totals 320,000 bases Cardio panel 1,000,000 bases Medulloblastoma. differs chosen case calculated .\n\nC coverage,\n\nL read length \n\nN number reads\ncleaned data set, look many reads left mapping. Calculate expected coverage use data gene panel (G = captured region). Illumina MiSeq V3 can produce 25 million reads length 300, many patients analyse per run minimum coverage 20 using gene panel? Calculate assignments R within document.Select correct Map BWA tool Tools menu (depends read length). mapping using built-genome many available. Select Human reference hg38 reference genome setting. Select paired end reads.previous experiments different FASTQ cleaning settings, select R1 paired Trimmomatic data first set reads R2 paired Trimmomatic second set reads. Execute tool, take run (10 - 20 minutes).","code":""},{"path":"mapping.html","id":"marking-duplicate-mapped-reads","chapter":"Week 2 Read Mapping","heading":"2.2 Marking Duplicate Mapped Reads","text":"process creating reads, duplicates may arisen PCR artifacts. duplicate reads real biological sequences sense originate sample, technical artifact. downstream analysis duplicate reads may generate false positive variants. Can think reason case?going look differences reference patient, first mark duplicate mapped reads. , select MarkDuplicates tool Tools menu. Select Map BWA-MEM output data … …., set Assume input file already sorted option Execute tool. tool add flag read finds duplicate tools ignore read flag. therefore remove read data.","code":""},{"path":"mapping.html","id":"visualizing-the-mapping-data","chapter":"Week 2 Read Mapping","heading":"2.3 Visualizing the Mapping Data","text":"going look actual mapping get bit feel happend till now. look mapping output previous step - marked duplicates - Genome Browser.system Integrated Genome Viewer (IGV) installed. First need download mapping data computer. , download dataset bam_index files markduplicates output Galaxy shown .Select Save File pop window.Open IGV either going (Linux)  Applications Menu -> Run Program… type igv click launch opening terminal entering igv command. Next, can load mapping data IGV clicking File -> load File…. Look Downloads folder file name starting Galaxy ending .bam (need open BAM file, index file automatically loaded).sequence reads captured exomes, zoom quite bit see mappings. help find zoom , can add extra layer genome browser (called track). Galaxy server hosts details available gene panels purpose. can download file case going Shared Data -> Data Libraries -> case_name Galaxy browser. Select case_name.BED click History button (replace case_name actual case). Please look file History. file consists 4 columns, describe chromosome number, exon start location, exon end location gene name. Download file (Save File) computer.Now, IGV, select File -> Load File... Select downloaded BED file open . IGV now display new track containing exons interest (SOD2 gene example):4th column bed file, choose couple gene names inspect. shown SOD2 gene located chr6 5 exons part Cardiomyopathy gene panel.IGV type name selected gene search box click Go.screen load mapping results region includes selected gene.\ncouple regions important genome browser screen. top row shows location looking now (red vertical bar chromosome):bottom tracks show locations reference human genes locations gene panel captured exons. Note due splice variants, exons interest; example, last exon (first one left, SOD2 gene reverse strand) part gene panel:\nmiddle part actual mapping data first tarck shows coverage plot showing many reads mapped position nucleotide distribution position (hovering position mouse cursor). Also number forward reverse reads shown. case position 328 reads mapped. also tells us 100% reads G position (157 forward mapped reads 171 reverse mapped reads)coverage track actual mapping data displayed. mapped paired-end reads make visible IGV, right click mapping track select View pairs. Reads colored according read orientation insert size. Look IGV online manual explaination colors.Zoom gene interest. Regions reads grey color indicate similar region reference. Variants shown colored vertical bars (nucleotide color). Zoom till nucleotide sequence showing variant. example looking T variant patient position. see total 117 reads mapped position reads 64 T 53 position. patient heterozygous allele. Can see variant exon ?, consequences variant exon location?Assignment: look variant exon within mapping data. bottom row show translation DNA protein. found variant causes change (non-synonymous) aminoacid sequence (synonymous)? Note need take gene orientation account. black arrow bottom left IGV near amino acid translation track clickable change orientation.next steps answer questions data set, : many variants found?, many located within exons? many variants actually cause aminoacid change? manually using IGV tool uses naive variant calling method result many false positives. going use sophisticated method next chapter.","code":""},{"path":"pileup.html","id":"pileup","chapter":"Week 3 Analysis of Variants","heading":"Week 3 Analysis of Variants","text":"done mapping reads reference genome, can determine variant positions within genes interest. use Galaxy tool called LoFreq report found variants statistics allele frequency, number supported reads, average base quality found position, etc.finding actual variants, perform analysis assessing achieved coverage. might seen IGV, coverages range high numbers (300+) places reads present. chapter use R number libraries often used genetics research report numbers panel genes.","code":""},{"path":"pileup.html","id":"assignment-week-3","chapter":"Week 3 Analysis of Variants","heading":"3.1 Assignment week 3","text":"","code":""},{"path":"pileup.html","id":"programming-assignments-coverage-overview-for-panel-genes","chapter":"Week 3 Analysis of Variants","heading":"Programming Assignments; Coverage Overview for Panel Genes","text":"Within output previous mapping step (BAM file) can see (well) panel-genes covered reads, important statistic quality data. assess manually using IGV, definitely method use task given can 1-2000+ mapped exons total. section contains number small assignments - completed - give us clear indication whether mapping sufficient quality. Depending outcome might need revisit previous step(s) trimming process increase mapping quality.assignments gain insight coverage genes interest well variants. use BED-file describing locations exons, BAM file containing mapped reads - ’ll create later - VCF-file listing found variants. number assignments asks visualize results get good understanding ’re looking .","code":""},{"path":"pileup.html","id":"assignment-instructions","chapter":"Week 3 Analysis of Variants","heading":"Assignment Instructions","text":"number assignments together perform tasks explained . required carefully read instructions make sure understand goal data used particular assignment. able critically reflect outcome analysis important aspect bioinformatician! Furthermore, assignments generally guideline considered minimum tasks complete, always invited data . Feel free explore keep code lab-journal \nwell.perform tasks need learn theory specific working data (BED Pileup files among others). introduce Bioconductor libraries later . First though explore simple data files create simple plots based BED data.assignments, create least one code-chunk, name accordingly assignments reflect . instance end product assignment one data frame proper header overview plot number exons per chromosome, end assignment stating “loading processing data, overview shows chromosomes exons located panel genes”.","code":""},{"path":"pileup.html","id":"assignment-1-loading-the-bed-data","chapter":"Week 3 Analysis of Variants","heading":"3.1.1 Assignment 1; Loading the BED-data","text":"first step program read BED file get exon locations panel genes. already viewed contents BED file Galaxy, saw file contains 4 columns:chromosome number,exon start location,exon end location thegene nameFor example:Perform tasks:Load BED-data\nSince data stored text file using tabs column\nseparators, can easily read using read.table\nfunction.\nSince data stored text file using tabs column\nseparators, can easily read using read.table\nfunction.Change column names\ncolumn names BED-file read.table gives\ndefault names case: [1] \"V1\" \"V2\" \"V3\" \"V4\". Using \nnames function, can assign new column names, \nassigning vector four column names (see help \nnames)\ncolumn names BED-file read.table gives\ndefault names case: [1] \"V1\" \"V2\" \"V3\" \"V4\". Using \nnames function, can assign new column names, \nassigning vector four column names (see help \nnames)Print number exons per chromosome\neasy way get overview large amounts data (\n1204 exons case) using table function. Using\nfunction, show number exons per chromosome.\neasy way get overview large amounts data (\n1204 exons case) using table function. Using\nfunction, show number exons per chromosome.Plot number exons per chromosome\ndata (3) can used create plot giving \nbarplot function. Change label y-axis \nsomething meaningful. Since chromosome numbers can’t fit\nx-axis can change orientation using las = 2\nargument barplot. options aren’t necessary \nplot doesn’t pretty stage.\ndata (3) can used create plot giving \nbarplot function. Change label y-axis \nsomething meaningful. Since chromosome numbers can’t fit\nx-axis can change orientation using las = 2\nargument barplot. options aren’t necessary \nplot doesn’t pretty stage.","code":"10  75399683    75399795    MYOZ1   \n10  75757946    75758153    VCL   \n10  75802821    75802931    VCL"},{"path":"pileup.html","id":"assignment-2-bed-visualization","chapter":"Week 3 Analysis of Variants","heading":"3.1.2 Assignment 2; BED-visualization","text":"Visualize number genes per chromosome\nrequires creation subset unique chromosome-gene\ncombinations; genes consist exons reduce \ngenes single exon (doesn’t matter ), can use\ntable function give us numbers need.\nSelect ‘chromosome’ ‘gene’ columns (using names\ngave assignment 1.2) BED-data\nApply unique function reduce data single row\nper gene store ‘chromosome’ column result\nGive data table use result input \nbarplot function using proper label y-axis.\nrequires creation subset unique chromosome-gene\ncombinations; genes consist exons reduce \ngenes single exon (doesn’t matter ), can use\ntable function give us numbers need.Select ‘chromosome’ ‘gene’ columns (using names\ngave assignment 1.2) BED-dataApply unique function reduce data single row\nper gene store ‘chromosome’ column resultGive data table use result input \nbarplot function using proper label y-axis.","code":""},{"path":"pileup.html","id":"assignment-3-bioconductor","chapter":"Week 3 Analysis of Variants","heading":"3.1.3 Assignment 3; Bioconductor","text":"software developers develop algorithms solutions common\nproblems, like publish code others can use\n. R (many programming languages) code \npackaged library can easily distributed others.\nmight already familiar library() function R load\nexternal code environment \n.Bioconductor repository contains\n1800 libraries can get R use perform\nanalysis . vast amount libraries focused \nanalyzing, processing visualizing (high-throughput) biological data\nalso using practical courses. Luckily \ndon’t find libraries assignments \nalways instruct one use (load actually, since \npre-installed network).introduce concept required \nremaining assignments , namely GenomicRanges objects\n(website,\nmanual),\nconsisting IRanges\n(website,\nmanual)\nobjects. ‘objects’ (hold data combination vectors,\nlists data frames among data structures) used store\ninformation features genome. features (introns,\nexons, variants, etc.) always defined coordinates \nstart stop positions name sequence (case,\nchromosome) lie.BED-file instance can represented using\nIRanges since contain simple positional data (chromosome\nposition (start/ stop BED-data). Let’s first see example representing exons BED file IRanges objects (don’t need replicate \nexample).Shown dataframe similar data containing five\nexons SOD2 gene located chromosome 6. exon \nbegin end coordinate. data can converted IRanges \nusing similar named function providing correct columns \nshown :see data now represented IRanges object. however miss data (chromosome) get extra data well (width (length) exon). ’s important know chromosome gene lies convert ranges object GRanges object combines data:comparing IRanges object GRanges object, looks rather similar yet missing data (width) extra data (strand). Nothing lost though, objects often lot accessor methods can use getting actual data, example representation object get print . Functions width() applied IRanges object gives width column ranges() function applied GRanges object gives IRanges object contained within. needed, assignments hint usage linked manuals also describe important ones.Now gene within GRanges object, can ? now just BED data lot, also put Pileup data similar GRanges object, can start asking data interesting questions pileup function instance. can used get Pileup information specific exons ignoring everything else. can need get BED-data proper format first now.challenging assignment results yet another type object, named GRangesList contains multiple GRanges objects; one gene shown example. , order need :Create empty (standard) R list,Iterate genes BED file,\nRead part iteration \nhints split function get gene names data easily accessible.\nRead part iteration andthe hints split function get gene names data easily accessible.gene, create GRanges object add list, including gene name (use following form: my_list[[gene_name]] <- data) andConvert complete list GRangesList object.\nUse conversion explained GRanges manual: bed_data <- GRangesList(bed_data) given list called bed_data.\nUse conversion explained GRanges manual: bed_data <- GRangesList(bed_data) given list called bed_data.techniques required assignment mainly knowing work lists (including create , accessing single elements, adding lists iterating items). following hints, numbered list examples everything need assignment.Hints instructions:IterationWhen talk iterating programming, mean repeatedly performing set operations separate elements (vector, list, columns rows data-frame, etc.). ordinary programming languages often requires explicit step-wise execution operations, using constructs ‘loops’. R however, already perform lot iterative steps without realizing . Given vector x, can multiply value simply stating x * x. Programming languages Python, Java C require code like:still pretty readable code, R never require explicit form even though . simple one liner R instance calculates average log2 ratio two columns data-frame can contain thousands rows many columns, :require rather large -loop languages. want apply something element separately R often use - rather complicated efficient - apply functions. now though use easier understand loop perform code data gene (point 1 ). following example iterating bed_data able perform assignment:HintsAs point 2 asks iterate genes, need think way group data (exons) genes can done using split function. result split list 55 named elements; one gene.\nsplit function requires two arguments: first data-frame containing data second argument column containing gene names (.e. bed_file$gene)\ncan get gene names executing names function resulting list split.\ncan get exon-rows easily accessing list items: split_output[[gene_name]].\nsplit function requires two arguments: first data-frame containing data second argument column containing gene names (.e. bed_file$gene)can get gene names executing names function resulting list split.can get exon-rows easily accessing list items: split_output[[gene_name]].iterating, code execute gene (1) create IRanges object, (2) create GRanges object combining chromosome IRanges object finally appending list.Note requires empty list created -loop, exons <- list().Revisit everything ’ve written complete task make sure understand everything (exact works less importance). Also, can use functions like class elementType confirm list class GRangesList (actually CompressedGRangesList) contents type GRanges.","code":"\n## Only needed when the package is missing\nif (!require(\"BiocManager\"))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"GenomicRanges\")\n# This package contains the 'IRanges', 'GRanges' and 'GRangesList' classes we will use\nlibrary(GenomicRanges)\n# Loading the BED data (note: use your own data from assignment 1)\nload(\"data/bed_data.RData\")\n# Print all rows where the gene name is for example 'SOD2'\nbed_file[bed_file$gene == \"SOD2\", ]##     chromosome     begin       end gene\n## 649          6 160103505 160103690 SOD2\n## 650          6 160105866 160106085 SOD2\n## 651          6 160109138 160109294 SOD2\n## 652          6 160113673 160113915 SOD2\n## 653          6 160114157 160114219 SOD2\n# Get the data as a subset of the cardiopanel data\nsod2 <- bed_file[bed_file$gene == \"SOD2\", ]\n\n# Assign whole columns to the IRanges arguments\nranges <- IRanges(start = sod2$begin,\n                  end = sod2$end,\n                  names = sod2$gene)\n# Print the object\nranges## IRanges object with 5 ranges and 0 metadata columns:\n##            start       end     width\n##        <integer> <integer> <integer>\n##   SOD2 160103505 160103690       186\n##   SOD2 160105866 160106085       220\n##   SOD2 160109138 160109294       157\n##   SOD2 160113673 160113915       243\n##   SOD2 160114157 160114219        63\n# Calculate and print the length of a gene\ncat(\"Length of SOD2:\", sum( width(ranges) ), \"bp\")## Length of SOD2: 869 bp## GRanges object with 5 ranges and 0 metadata columns:\n##        seqnames              ranges strand\n##           <Rle>           <IRanges>  <Rle>\n##   SOD2        6 160103505-160103690      *\n##   SOD2        6 160105866-160106085      *\n##   SOD2        6 160109138-160109294      *\n##   SOD2        6 160113673-160113915      *\n##   SOD2        6 160114157-160114219      *\n##   -------\n##   seqinfo: 18 sequences from an unspecified genome; no seqlengths\n# Converts iRanges to GRanges, adding the chromosome name\ngranges <- GRanges(seqnames = sod2$chromosome,\n                   ranges = ranges)\ngrangessquared = []\nfor value in x:\n    squared.append(value * value)\nmean(log2(dat['sample1'], dat['sample2']))\n# Load the stored data; do not repeat. Object name in this\n# example is 'bed_data' \nload('data/bed_data_GRangesList.RData')\n\n# Split the data by gene, resulting in a list with named elements\nbed_splitted <- split(bed_file, bed_file$gene)\n# Print the names of the first 10 genes\nfor (gene in names(bed_splitted)[1:10]) {\n    print(gene)\n}## [1] \"ABCC9\"\n## [1] \"ACTC1\"\n## [1] \"ACTN2\"\n## [1] \"ANKRD1\"\n## [1] \"BAG3\"\n## [1] \"CALR3\"\n## [1] \"CAV3\"\n## [1] \"CRYAB\"\n## [1] \"CSRP3\"\n## [1] \"DES\""},{"path":"pileup.html","id":"assignment-4-gene-lengths","chapter":"Week 3 Analysis of Variants","heading":"3.1.4 Assignment 4; Gene Lengths","text":"’ll create one last visualization based BED-data - now using GRanges object - namely overview gene lengths; another barplot. following example code shows calculate length single gene (using ranges, width sum). code also works complete GRangesList object, use create barplot showing length gene.Hint:might see, can genes long compared others makes plot difficult read. plotrix library contains gap.barplot function specifically purpose (also supports las = 2 argument). Try use function creating barplot. small challenge can try style y-axis show values (‘ticks’) besides minimum maximum.","code":"\n# Check the length (in basepairs) of a single gene (exons only)\npsen2_ranges <- ranges(bed_data[['PSEN2']])\npaste(\"Length of the 'PSEN2' gene:\", sum(width(psen2_ranges)), \"\\n\")"},{"path":"pileup.html","id":"assignment-5-loading-the-mapped-reads","chapter":"Week 3 Analysis of Variants","heading":"3.1.5 Assignment 5; Loading the Mapped Reads","text":"R use output mapping step (BAM file) inspect coverage mapped positions panel genes. R library can read data (RSamtools website manual) GRanges objects. already downloaded data input IGV tool previous chapter.","code":""},{"path":"pileup.html","id":"rsamtools","chapter":"Week 3 Analysis of Variants","heading":"Rsamtools","text":", briefly introduce library able use . Rsamtools described “interface BAM files”, file contains mapping information.Functions Rsamtools use - order - :BamFile: Reference BAM data index (.bam.bai)ScanBamParam: Sets parameters selecting certain region genome using GRanges (.e., gene BED-data)pileup: Actually retrieves region interest given BamFile parameters supplied.Assignment:Load BAM mapping data list data-frames covering mapped positions interest","code":"\n# Installing required library\nBiocManager::install(\"Rsamtools\")\n\n# Loading the RSamtools library\nlibrary(Rsamtools)"},{"path":"pileup.html","id":"instructions","chapter":"Week 3 Analysis of Variants","heading":"Instructions","text":"Create BamFile object providing file index parametersCreate BamFile object providing file index parametersCreate ScanBamParam object\ndefining ranges want get mapping, case ranges exons gene\nselecting single gene GRangesList object (using [[\"geneName\"]] syntax) store object (’s type GRanges)\nGive GRanges object ScanBamParam function store variable\nCreate ScanBamParam objectWhat defining ranges want get mapping, case ranges exons geneDo selecting single gene GRangesList object (using [[\"geneName\"]] syntax) store object (’s type GRanges)Give GRanges object ScanBamParam function store variableGet actual mapping data region interest\nCall pileup function providing - order - objects created points 1-2. Note need tell pileup parameter , use pileup(file = ..., scanBamParam = ...)\noutput pileup function data-frame, store result\nPrint first lines data-frame (use head function)\nGet actual mapping data region interestCall pileup function providing - order - objects created points 1-2. Note need tell pileup parameter , use pileup(file = ..., scanBamParam = ...)output pileup function data-frame, store resultPrint first lines data-frame (use head function)mention pileup assignment means looking single genomic position like ’ve seen IGV. tools available generate pileup file BAM file (file format description available\n\n) containing following information mapped positions:chromosome name (1)reference position (2),reference base (3),number supporting reads (4),match (5), either:\ndot match forward strand \ncomma match reverse strand\nnucleotide case mismatch (upper case forward\nstrand, lower case reverse strand)\ninsertions/ deletions (defined + - sign followed \nnumber defining size insert/ deletion, followed \nbases form insert/ deletion).\ndot match forward strand ora comma match reverse stranda nucleotide case mismatch (upper case forward\nstrand, lower case reverse strand)insertions/ deletions (defined + - sign followed \nnumber defining size insert/ deletion, followed \nbases form insert/ deletion).quality [6] (taken FASTQ file) can seen last\ncolumn, one value readThe reason format called pileup position\npile (stack) data mapped reads \nposition. first example line (chromosome 1, position 10004)\none read match (reference C shown \ncolumn 3) reverse strand second line three supporting\nreads match.line example multiple reads (30 total, shown\ncolumn 4 lengths columns 5 6) mapped single\nposition. chromosome 1 see column 5 \nsomething going . Read 8 contained C whereas reference (\n29 reads) show T position, classified\nmismatch subject analysis steps.Besides mismatches, can also insertions deletions \nshown example - sign followed number \nnumber bases missing.Look data get position note - least - two rows data per position; one strand (’ve also seen IGV). two rows data single position, might variant coincidentally demonstrated example data :first position SOD2 gene case shows three rows; two positive strand one negative strand. count column shows single read T nucleotide position instead C 297 reads show. big difference, can attributed sequencing error.Note though now summary actual pileup compared detailed line see actual Pileup file within Galaxy. data also available using RSamtools require summary.","code":"  1          2   3    4   5     6\nchr1     10004   c    1   ,     [ \nchr1     10005   g    3   ,,.   ?1>chr1    16888646    T   30  .......C........,.,.....,,....  WomHHGomooHmHFHHGGFH1GDHHHHGFFchr1    16888710    a   31  ..,.,..,..,,-2ct,,..,.,,.-2CT,,.,,.,.,, nGFkGUlFF?DFHFGGEnHFFHHGFHG5GGB\n# Load the example Pileup data for the SOD2 gene (do not repeat)\nload(\"data/sod2_pileup.RData\")\nhead(sod2, n = 5)##   seqnames       pos strand nucleotide count              which_label\n## 1     chr6 160103505      +          C   221 chr6:160103505-160103690\n## 2     chr6 160103505      -          C    77 chr6:160103505-160103690\n## 3     chr6 160103505      +          T     1 chr6:160103505-160103690\n## 4     chr6 160103506      +          T   220 chr6:160103505-160103690\n## 5     chr6 160103506      -          T    77 chr6:160103505-160103690"},{"path":"pileup.html","id":"assignment-6-pileup-processing","chapter":"Week 3 Analysis of Variants","heading":"3.1.6 Assignment 6; Pileup Processing","text":"assignment get pileup data genes single object can report average coverage gene determine positions low coverage might need inspect, later.Steps need taken:Create empty list (hold separate data-frame gene created assignment 5)Iterate BED-data (GRangesList object) similar assignment 3Get pileup data gene -loop, creating ScanBamParam executing pileup functionAdd resulting pileup data-frame list, using ’s gene name identifier (pileup_list[[gene_name]] <- ...)Check printing head gene used assignment 5","code":""},{"path":"pileup.html","id":"assignment-7-coverage-calculation-and-reporting","chapter":"Week 3 Analysis of Variants","heading":"3.1.7 Assignment 7; Coverage calculation and reporting","text":"Calculating actual coverage position little cumbersome need sum count rows single position since don’t - yet - care mismatches strand read mapped .Instead performing kinds programming steps check positions similar , summing count values, can use R function us. don’t expect understand following example besides understanding produces. summation can done function called aggregate, defined “Compute Summary Statistics Data Subsets”.Given column group (pos column) perform function different column (count column containing coverage. result aggregate two-column data-frame position sum count values position; total coverage.provide arguments follows:x: count column (provide list gets name resulting data-frame well): pos column grouping applied toFUN: function perform grouped rows (case, sum function)Use code check rename used variables suit data.task now calculate per-position coverage genes calculate report - gene:number bases sequenced gene,average coverage gene andthe number low-coverage positions (coverage < 30) number calculated percentage.Given tasks code previous assignments, able . Store calculated values (4 values) combined gene name new data-frame show completely lab-journal, ordered percentage low-coverage positions, descending.following code can used create empty data-frame add rows data. Note isn’t done often, use forget. first line code (options function) needed stop annoying R behaviour.","code":"\ncoverage = aggregate(x = list(count=sod2$count), \n                     by = list(pos=sod2$pos), FUN=sum)\nhead(coverage)##         pos count\n## 1 160103505   299\n## 2 160103506   297\n## 3 160103507   297\n## 4 160103508   291\n## 5 160103509   292\n## 6 160103510   290\n# Tell R not to complain...\noptions(stringsAsFactors = FALSE)\n\n# Create empty data-frame, but specify columns and data types\ndf <- data.frame(Name=character(), Course=character(), Grade=numeric())\n\n# Create a new row of data, stored as a named list (important)\nnew_row = list(Name=\"James\", Course=\"Math\", Grade=7.5)\n\n# Append data to the data-frame using rbind\ndf <- rbind(df, new_row)\n\n# Or within a single line\ndf <- rbind(df, list(Name=\"Wendy\", Course=\"Math\", Grade=8))\n\n# print\ndf##    Name Course Grade\n## 1 James   Math   7.5\n## 2 Wendy   Math   8.0"},{"path":"pileup.html","id":"hints","chapter":"Week 3 Analysis of Variants","heading":"Hints","text":"assignments using iteration, create data-frame outside -loop perform rbind within -loop.Take good look (print testing) iterating ; case list containing data-frames.need re-use aggregate code adjust make sure uses data get iterationStore calculated value variable within -loop check (print) mistakes easily made.","code":""},{"path":"pileup.html","id":"end-result","chapter":"Week 3 Analysis of Variants","heading":"End Result","text":"example data might get completed assignment. Note values well column names different case.Make sure complete report visible lab journal. Reflect results obtained; genes require inspection? , use IGV check low-coverage positions due lack reads reasons (include screenshot(s) lab journal).","code":"\n# Load example data\nload(\"data/statistics.RData\")\n\nstatistics##        length avg_coverage low_coverage low_coverage_perc\n## ABCC9    6348        249.2            0               0.0\n## ACTC1    1375        192.4           57               4.1\n## ACTN2    3527        184.5            0               0.0\n## ANKRD1   1322        232.4            0               0.0\n## BAG3     1892        207.7            0               0.0\n## CALR3    1511        242.5            0               0.0\n## CAV3      536        196.0            0               0.0\n## CRYAB     650        156.8            0               0.0\n## CSRP3     785        230.6            0               0.0\n## DES      1774        122.9          258              14.5\n## DMD     14643        248.7            0               0.0\n## DSC2     3424        237.9          109               3.2\n## DSG2     3959        239.1           86               2.2\n## DSP      9577        237.4            4               0.0\n## DTNA     3133        238.0            0               0.0\n## EMD      1006        169.9            0               0.0\n## EYA4     2683        251.9            0               0.0\n## GATAD1   1010        183.3          210              20.8\n## GLA      1570        237.6            0               0.0\n## JPH2     2292         88.7          699              30.5\n## JUP      2758         78.2          276              10.0\n## LAMA4    7193        236.0            0               0.0\n## LAMP2    1957        240.1            0               0.0\n## LDB3     3148        144.0           78               2.5\n## LMNA     2496         81.6          118               4.7\n## MYBPC3   5195        121.8          503               9.7\n## MYH6     7301        200.1           32               0.4\n## MYH7     7329        205.0            0               0.0\n## MYL2      781        211.4            1               0.1\n## MYL3      828        164.4            0               0.0\n## MYOZ1    1100        230.5            0               0.0\n## MYOZ2     995        252.1            0               0.0\n## MYPN     4723        243.7            0               0.0\n## NEXN     2511        247.7            0               0.0\n## PKP2     3206        207.9          263               8.2\n## PLN       199        233.8            0               0.0\n## PRKAG2   2350        183.2          349              14.9\n## PSEN1    1804        241.4            0               0.0\n## PSEN2    1747        150.2           56               3.2\n## RBM20    4243        215.7          230               5.4\n## RYR2    19104        246.3           88               0.5\n## SCN5A    6633        162.7          275               4.1\n## SGCD     1193        232.9            0               0.0\n## SOD2      869        184.4            6               0.7\n## TAZ      1400        168.5            0               0.0\n## TBX20    1664        193.4          167              10.0\n## TCAP      584         80.6            0               0.0\n## TMEM43   1683        179.5           52               3.1\n## TNNC1     726        175.0            0               0.0\n## TNNI3     953        105.2            0               0.0\n## TNNT2    1458        200.3           24               1.6\n## TPM1     1941        183.4          326              16.8\n## TTN    123059        250.0            0               0.0\n## TXNRD2   2241        132.8          116               5.2\n## VCL      4285        210.5           89               2.1"},{"path":"variants.html","id":"variants","chapter":"Week 4 Finding and Annotating Variants","heading":"Week 4 Finding and Annotating Variants","text":"likely ’ve already seen true variant (single mismatches) looks looked data IGV-browser. variant see number reads different base positions compared reference genome. ’ve mentioned , interested variants patient data genes gene panel. previous visualize--data assignment ask find variants using IGV-browser section going use program us.","code":""},{"path":"variants.html","id":"finding-variants","chapter":"Week 4 Finding and Annotating Variants","heading":"Finding Variants","text":"tool use LoFreq tool scans BAM file variants. tool settings , combined, defines position called variant. naive way just report position change. result many false positive variants (can explain ?). need statistical approach filter low quality variants ’s tool settings instance set minimum amount reads (coverage) position consider looking variations. Also variants supported minimum number reads base quality position low.Instructions:Run Call variants LoFreq tool using default settings. Select output BAM file Mark Duplicate tool use available GRCh38 reference genome. Feel free explore options leave Call variants across settings Whole reference (setting allows using BED file selecting variants interest basically following assignment).","code":""},{"path":"variants.html","id":"vcf-file-filtering","chapter":"Week 4 Finding and Annotating Variants","heading":"VCF File Filtering","text":"result LoFreq tool single new file history vcf file format line describes single variant. Galaxy can directly see many variants ; often well 1000 total. Note 17 comment-lines top file.looking file detail fairly easy see variants places interested . ’ve seen IGV, many regions sequenced outside genes interest, even far gene . LoFreq also checked regions variants assignment asks filter list variants keeping within exon boundaries genes interest. , another filtering step filtering actual variants. looking allele frequency value included VCF file. case, value describes percentage reads variant base.","code":""},{"path":"variants.html","id":"assignment-8-vcf-file-processing","chapter":"Week 4 Finding and Annotating Variants","heading":"4.0.1 Assignment 8; VCF File Processing","text":"Please briefly read linked Wikipedia page understand value importance. working patient data, use protocol described UMCG states variants minimum frequency 30% retained. means filter variants lower value. Note LoFreq stores value fraction filter values \\(>= 0.3\\).step--step instructions completing assignment. however possible without instructions partly repeat steps ’ve taken previous assignments.Read data data-frame using read.delim function\nMake sure data proper header (line 18 data)\nProvide stringsAsFactors = FALSE argument, otherwise next part won’t work (split R factor)\nMake sure data proper header (line 18 data)Provide stringsAsFactors = FALSE argument, otherwise next part won’t work (split R factor)Now data data-frame, inspect everything loaded correctly. first thing ’ll now get frequency value variant. Read comment lines VCF file see value stored. ’ll see columns contain fields, separated semicolon (;) can use split data get value want.Split column containing frequency value using strsplit functionThe output function list item vector separate items resulting split (inspect object RStudio). get frequency value list, R magic converts result strsplit matrix (found Stackoverflow):rbinds vectors matrix. , inspect object see actual value located want (use View function RStudio click name Environment tab).Perform following steps column containing frequency value:\nremove AF= part using gsub function\nconverts data type column numeric\nsaves column new variable\nremove AF= part using gsub functionconverts data type column numericsaves column new variableWe now frequency value available filtering ’ll adding GRanges object create next:Create GRanges object ’ve done assignment 3 simply creating IRanges object start end parameters get variant position column (POS column). Also provide seqnames parameter GRanges get contents chromosome column. Note need use -loop .GRanges objects can contain data well, called associated metadata. Using mcols function can see existing assign data variant. Adding data-frame allows us set name column demonstrated example previous chapter:Use example associate frequency value created GRanges object. Now BED-data (GRangesList object) VCF data GRanges object, canGet variants fall within exon\nUse findOverlaps function store output\nrequires query subject parameters set variants BED-GrangesList objects respectively\n\nConvert output data-frame using DataFrame function\nUse findOverlaps function store output\nrequires query subject parameters set variants BED-GrangesList objects respectively\nrequires query subject parameters set variants BED-GrangesList objects respectivelyConvert output data-frame using DataFrame functionThe result findOverlaps contains two columns interested querytHits column; rows VCF data lie within exon. can use column subset GRanges VCF object . Note subjectHits column describes exons genes; meaning subjectHit value 1 refers hit within first gene exons (ABCC9 case cardiopanel).Filter remaining variants based frequency, using minimum 30%\nInstead removing rows creating another subset, make sure know rows kept filtering steps going reconstruct original VCF file (need Galaxy)\nManually sample rows see fall within exon frequency > 30%\nInstead removing rows creating another subset, make sure know rows kept filtering steps going reconstruct original VCF file (need Galaxy)Manually sample rows see fall within exon frequency > 30%Now row numbers variants want keep, need think way re-construct VCF file save disk.\nHint: read VCF file sub-setting using readLines function\nNote: forget include 17 header lines!\nHint: read VCF file sub-setting using readLines functionNote: forget include 17 header lines!Upload new VCF file Galaxy ’ll use next chapter.","code":"\nhead( do.call(rbind, bed_splitted), n=20)##           chromosome    begin      end  gene\n## ABCC9.814         12 21953958 21954135 ABCC9\n## ABCC9.815         12 21958088 21958265 ABCC9\n## ABCC9.816         12 21958912 21959014 ABCC9\n## ABCC9.817         12 21960260 21960433 ABCC9\n## ABCC9.818         12 21962766 21962909 ABCC9\n## ABCC9.819         12 21964963 21965111 ABCC9\n## ABCC9.820         12 21967558 21967676 ABCC9\n## ABCC9.821         12 21968677 21968847 ABCC9\n## ABCC9.822         12 21970101 21970261 ABCC9\n## ABCC9.823         12 21971064 21971205 ABCC9\n## ABCC9.824         12 21981872 21982014 ABCC9\n## ABCC9.825         12 21990992 21991124 ABCC9\n## ABCC9.826         12 21995228 21995425 ABCC9\n## ABCC9.827         12 21997397 21997506 ABCC9\n## ABCC9.828         12 21997681 21997869 ABCC9\n## ABCC9.829         12 21998517 21998786 ABCC9\n## ABCC9.830         12 22001064 22001200 ABCC9\n## ABCC9.831         12 22005011 22005176 ABCC9\n## ABCC9.832         12 22005282 22005459 ABCC9\n## ABCC9.833         12 22012500 22012620 ABCC9\n# Select and show data for a single gene (note that it specifies \"... and 0 metadata columns\")\n# ('granges' object is used from assignment 3)\ngranges## GRanges object with 5 ranges and 0 metadata columns:\n##        seqnames              ranges strand\n##           <Rle>           <IRanges>  <Rle>\n##   SOD2        6 160103505-160103690      *\n##   SOD2        6 160105866-160106085      *\n##   SOD2        6 160109138-160109294      *\n##   SOD2        6 160113673-160113915      *\n##   SOD2        6 160114157-160114219      *\n##   -------\n##   seqinfo: 18 sequences from an unspecified genome; no seqlengths\n# Generate some random values for 'allele frequency'\nallele_frequency <- round(rnorm(5, mean = 0.45, sd = 0.35), 1)\n\n# Bind this data to the 'GRanges' object\nmcols(granges) <- DataFrame(AF=allele_frequency)\n\ngranges## GRanges object with 5 ranges and 1 metadata column:\n##        seqnames              ranges strand |        AF\n##           <Rle>           <IRanges>  <Rle> | <numeric>\n##   SOD2        6 160103505-160103690      * |       0.6\n##   SOD2        6 160105866-160106085      * |       0.5\n##   SOD2        6 160109138-160109294      * |       1.2\n##   SOD2        6 160113673-160113915      * |       0.2\n##   SOD2        6 160114157-160114219      * |       0.6\n##   -------\n##   seqinfo: 18 sequences from an unspecified genome; no seqlengths"},{"path":"variants.html","id":"assignment-9-variant-visualization","chapter":"Week 4 Finding and Annotating Variants","heading":"4.0.2 Assignment 9; Variant Visualization","text":"create two simple visualizations:Visualize allele frequency remaining variants using hist function. Remember can use mcols function get metadata column use $-sign name column. Pass argument breaks=20 hist answer following question lab-journal:\nCan explain two peaks see histogram (around 50% 100%)?\nCan explain two peaks see histogram (around 50% 100%)?Visualize amount variants per gene. simple solution getting numbers use table function subjectHits column (output findOverlaps subject genes). Convert data frame use gene indices get actual gene names. Now combination gene number variants. Create barplot data previous chapter use cex.names=0.7 scale gene names make visible.also possible add VCF file IGV (together mapping- BED-files) visualize variants context genes. however requirement assignment.","code":""},{"path":"variants.html","id":"variant-annotation","chapter":"Week 4 Finding and Annotating Variants","heading":"4.1 Variant Annotation","text":"- now - final Galaxy workflow step analyzing patient, going annotate filtered variants determine severity variations determined last time LoFreq tool. involves comparing variants number databases containing annotation data known variants. use filtered VCF-file resulting LoFreq need upload newly created VCF file Galaxy. Make sure Galaxy recognizes file type selecting correct file type uploading change afterwards using Edit attributes button.","code":""},{"path":"variants.html","id":"snpeff-and-snpsift","chapter":"Week 4 Finding and Annotating Variants","heading":"4.2 SnpEff and SnpSift","text":"multiple methods annotating found variants. require extra data predict effect variant compare known set variants. use set tools types annotation. See details manual Github documentation.SnpEff: variant annotation effect prediction tool. annotates predicts effects genetic variants (amino acid changes)SnpSift: toolbox allows filter manipulate annotated files.\nactually, tool also annotates variants using variety data sources, use .\nactually, tool also annotates variants using variety data sources, use .tools available Galaxy numerous sub-tools depending task want . get information variant, perform three annotation runs:Step 1: Using SnpEff annotate variants using GRCh38.86 database adding information related gene, transcript protein affected variant. results lot extra data documented changed VCF header.example, given following variant input:chr1 237550644   .   C     91.0    PASS    DP=578;AF=0.017301;SB=1;DP4=252,316,5,5This result SnpEff:chr1 237550644   .   C     91.0    PASS    DP=578;AF=0.017301;SB=1;DP4=252,316,5,5;ANN=|missense_variant|MODERATE|RYR2|ENSG00000198626|transcript|ENST00000366574.6|protein_coding|27/105|c.3167C>|p.Thr1056Lys|3484/16562|3167/14904|1056/4967||,|missense_variant|MODERATE|RYR2|ENSG00000198626|transcript|ENST00000360064.7|protein_coding|25/103|c.3119C>|p.Thr1040Lys|3119/14850|3119/14850|1040/4949||WARNING_TRANSCRIPT_NO_START_CODON,|downstream_gene_variant|MODIFIER|SNORA25|ENSG00000252290|transcript|ENST00000516481.1|snoRNA||n.*4396G>T|||||4396|details added ANN field. See description VCF header field--field explanation values.Running SnpEff:Select SnpEff Variant effect annotation tool Variant Calling tool menu Galaxy.Select uploaded VCF file containing variants filtered cardiopanel genes.Check default selected GRCh38.86 Genome Source selected.settings can left default, execute tool.result consists two files: annotated VCF file web-report variants predicted effects.Step 2: Adding dbSnp entries using SnpSift. dbSnp database contains information known variants. version also includes clinical significance (combining ClinVar database) available SnpSift tool Galaxy.Running SnpSift dbsnp:SnpSift requires dbSnp database available history:\nGalaxy, go Shared Data (top menu) –> Data Libraries –> dbSnp library\nSelect files shown use Add history –> datasets option get history\nGalaxy, go Shared Data (top menu) –> Data Libraries –> dbSnp librarySelect files shown use Add history –> datasets option get historySelect SnpSift Annotate SNPs dbSnp tool Variant Calling tool menu Galaxy.\nNote: different tool dbNSFP database, see step #3 .\nNote: different tool dbNSFP database, see step #3 .Select output VCF file created SnpEff step #1 Variant input file.Select dbSnp_clinvar.vcf.gz file VCF File ID field annotated.Fields annotate select Add also INFO fields option execute tool.tool adds annotations two columns. First, ID column describe dbSnp ID (rs number) can used look variant. Second, INFO column expanded (lot ) extra information variant known. instance, ClinVar data might report diseases variant related , :CLNDN=Cardiovascular_phenotype|Charcot-Marie-Tooth_disease|Lipoatrophy_with_Diabetes,_Hepatic_Steatosis,_Hypertrophic_Cardiomyopathy,_and_Leukomelanodermic_PapulesStep 3: Annotating using dbNSFP database SnpSift. dbNSFP database huge collection (300GB text files) annotation sources combined single database. SnpSift tool can compare variants known variants annotation sources - like first steps - adds VCF file. can expect, VCF file become large likely unreadable. Therefore, re-use VCF file gained step #1 instead VCF file SnpSift step #2. can later combine data parsing files separately.Running SnpSift dbNSFP:Select SnpSift dbNSFP tool Variant Calling tool menu Galaxy.Use VCF file step #1 inputSelect locally available GRCh38 dbNSFP4.3c Genome databaseSelect options Annotate optionNote tool description lists output available selection, look specifics selected databases later .","code":""},{"path":"variants.html","id":"assignment","chapter":"Week 4 Finding and Annotating Variants","heading":"Assignment","text":"Create table report summarize added annotation data (!) briefly;\ndatabase data comes \nresult value (identifier, percentage, etc.).\nHint: can add formatted tables markdown syntax easiest generated https://www.tablesgenerator.com\ndatabase data comes fromThe result value (identifier, percentage, etc.).Hint: can add formatted tables markdown syntax easiest generated https://www.tablesgenerator.comThe VCF header describes names databases data originates give clear explanation. might single source documentation (please let us know find !), now best method getting information added data :Step #1: output first step also includes web report least gives details results. Either use biological knowledge search terms ’re unclearStep #2: data dbSnp database comes ‘ClinVar’ version database, documented NCBI website.Step #3: dbNSFP database descriptions available online version:\nGo online dbNSFP instance, select Academic option click Connect.\nhover selectable Variant fields, can read brief description data added.\nNote dbNSFP version 4.4a use version 4.3c (minor differences)\nGo online dbNSFP instance, select Academic option click Connect.hover selectable Variant fields, can read brief description data added.Note dbNSFP version 4.4a use version 4.3c (minor differences)","code":""},{"path":"variants.html","id":"programming-assignment-analyzing-variant-annotation","chapter":"Week 4 Finding and Annotating Variants","heading":"4.3 Programming Assignment; Analyzing Variant Annotation","text":"Given possibly hundreds annotated variants data multiple data sources, ’s time one last filtering data come list variants can say, certainty, related condition. VCF-filter tool ’ve written, check line decide variant worth reporting . Whether want keep variant depends annotation added SnpEff/SnpSift task come approach combining data data sources rank annotated variants.","code":""},{"path":"variants.html","id":"assignment-10-data-preparation","chapter":"Week 4 Finding and Annotating Variants","heading":"4.3.1 Assignment 10; Data Preparation","text":"programming assignment asks take another good look data, now R see everything suitable format eventually sort data extract top-set variants related condition. seen, data essentially stored single column contains multiple separators (| ;). need think implement good strategy convert information workable data format, data frame.caveats though can also seen looking SnpEff report (‘stats’ output). instance, two lines overview table describe amount variants amount hits SnpEff database:Number variants (filter)       145Number effects        1,332Which means average every variant 10 (!) hits data placed INFO column (notably ANN part INFO column). caused often multiple transcripts (alternative splicing) affected variant. makes difficult parse therefore section gives tips example code assist task. much data three different steps complex assess single run assess annotation data step step.","code":""},{"path":"variants.html","id":"step-1-2-snpeff-ann-data-and-snpsift-clinvar-data","chapter":"Week 4 Finding and Annotating Variants","heading":"Step #1 & #2; SnpEff ANN data and SnpSift ClinVar data","text":"According VCF header, ANN data contains values explained SnpEff documentation. , interest. Galaxy tool available extract interesting fields added data.Select SnpSift Extract Fields VCF file tabular file tool tool menu\ntool help manual can provide details\ntool help manual can provide detailsSelect annotated VCF file inputProvide names columns interest. instance, following used query ‘Fields extract’:\nCHROM POS REF ALT ANN[*].EFFECT ANN[*].IMPACT ANN[*].GENE ANN[*].FEATURE ANN[*].FEATUREID ANN[*].BIOTYPE ANN[*].ERRORS CLNDN CLNSIG\nAdd remove column find interesting query.\nCHROM POS REF ALT ANN[*].EFFECT ANN[*].IMPACT ANN[*].GENE ANN[*].FEATURE ANN[*].FEATUREID ANN[*].BIOTYPE ANN[*].ERRORS CLNDN CLNSIGAdd remove column find interesting query.Enable ‘One effect per line’ optionRun tool download resulting tabular file analysis R\nresulting file contains many rows effects reported SnpEff (1332 example)\nresulting file contains many rows effects reported SnpEff (1332 example)Note: always include CHROM POS REF ALT columns needed identify variant original file.","code":""},{"path":"variants.html","id":"step-3-snpsift-dbnsfp","chapter":"Week 4 Finding and Annotating Variants","heading":"Step #3; SnpSift dbNSFP","text":"Similar previous step, extract fields interest using SnpSift Extract Fields VCF file tabular file tool. dbNSFP entries prefixed dbNSFP_, instance: dbNSFP_MutationAssessor_score dbNSFP_SIFT_pred. done, download tabular file analysis.","code":""},{"path":"variants.html","id":"assignment-11-finding-variants-of-interest","chapter":"Week 4 Finding and Annotating Variants","heading":"4.3.2 Assignment 11; Finding Variants of Interest","text":"Given knowledge data stored two dataframes, can now formulate questions data find set variants likely linked cardiomyopathy condition. condition identified single variant often caused several variants combination determines someone suffers cardiomyopathy also badly condition .physician diagnoses patients uses genetic information found variants one sources confirming condition. However, presenting list 100+ variant positions list numbers tools works practice; need present short, ordered list variants can related condition.Next, define sorting, filtering, selecting, etc. procedure filter order top-list variants ’d present aid diagnoses. instance, might variant hit ClinVar database directly links cardiomyopathy, probably somewhere around top list. , look output description ’ve written earlier come combination(s) values. golden standard selecting variants important properly document argument decisions.end product step expected include nice table including least 10 variants report contains relevant information , .e. chromomsome, position, reference variant nucleotides, gene name relevant scores.variants, try (briefly!) answer following questions variant:Can find link cardiomyopathy variant?effect variant?validated?scientific studies supporting evidence?score indicate?else can find variant?can use following online sources among others:http://www.ncbi.nlm.nih.gov/snp/http://www.ncbi.nlm.nih.gov/variation/tools/1000genomes/http://www.ncbi.nlm.nih.gov/projects/SNP/","code":""},{"path":"presentation.html","id":"presentation","chapter":"Week 5 Presentation","heading":"Week 5 Presentation","text":"described chapter 1, analysis resulting variants needs presented. make presentation appealing, can add visual elements report. section, discuss options visualizing data.Besides graphical representation, complete table variants - importantly - reason selected included presentation.LollipopPlotThis visualization can helpful cases many top-variants located within single gene. plot shows position variant x-axis score y-axis. score can AF value VCF file score added annotation steps. data (‘dimensions’) can added changes :color lollipop (e.g. red high score, green low score)size lollipop (e.g. size lollipop proportional score)symbol lollipop (e.g. star variant validated)value displayed within nodeText labels attached nodesThere multiple options drawing types graphs demonstrate use lolliplot function trackViewer package R, see online manual many examples create plot. package installed default , install :requires two data sources use case:sample data GRanges object containing variants\nexample shows use output findOverlaps get variants single gene\nexample shows use output findOverlaps get variants single geneThe feature data containing gene variants located, also GRanges format\nget exons selected gene use BED-data already GRanges object.\nget exons selected gene use BED-data already GRanges object.basic example shows 9 variants RET gene, AF value score (scaled range 0-100%). plot shows position variant x-axis allele-frequency y-axis.Note: scores bit weird plot; instance show values ranging 0 1 (SIFT scores). Values 1-10 shown stacked nodes (see Change height lollipop plot section manual). safe solution scale values 0-100 shown . Alternatively, can use stacks show amount splice variants single location (maximum 10).Simple improvements increase height color exons (exons share value):Adding labels variants, case random dbsnp IDs value available:Changing color based effect impact SnpEff Galaxy toolDandelion PlotIf lot variants close together, alternative can dandelion plot variation lollipop plot variants grouped together based position. ’s available library, see online manual information.","code":"\nBiocManager::install(\"trackViewer\")\nlibrary(trackViewer)\n# Preparing the data; first attach the gene names to the findOverlaps output\noverlap_df$Gene <- names(bed_data)[overlap_df$subjectHits]\n\n# Then, use this to get all variants from a single gene ('RET' in this example)\n# Note that the vcf_Granges already containes the Allele frequency values (AF)\nsample.gr <- vcf_GRanges[unlist(subset(overlap_df, Gene == \"RET\", select = queryHits))]\n\n# The features are taken from the GRangesList object from chapter 3, assignment 3\nfeatures <- bed_data$RET\n# Calculate AF as percentage and set as 'score' field\nsample.gr$score <- sample.gr$AF * 100\nhead(sample.gr)## GRanges object with 6 ranges and 2 metadata columns:\n##       seqnames    ranges strand |     score        AF\n##          <Rle> <IRanges>  <Rle> | <numeric> <numeric>\n##   [1]    chr10  43077059      * |   92.8571  0.928571\n##   [2]    chr10  43077063      * |   60.0000  0.600000\n##   [3]    chr10  43100520      * |   99.8780  0.998780\n##   [4]    chr10  43111239      * |  100.0000  1.000000\n##   [5]    chr10  43118395      * |   44.8733  0.448733\n##   [6]    chr10  43119646      * |   45.9846  0.459846\n##   -------\n##   seqinfo: 21 sequences from an unspecified genome; no seqlengths\n# RET gene exons\nhead(features)## GRanges object with 6 ranges and 0 metadata columns:\n##       seqnames            ranges strand\n##          <Rle>         <IRanges>  <Rle>\n##   RET    chr10 43077026-43077331      *\n##   RET    chr10 43100458-43100722      *\n##   RET    chr10 43102341-43102629      *\n##   RET    chr10 43104731-43105193      *\n##   RET    chr10 43106375-43106571      *\n##   RET    chr10 43109030-43109230      *\n##   -------\n##   seqinfo: 22 sequences from an unspecified genome; no seqlengths\nlolliplot(sample.gr, features, ylab = \"Allele Frequency (%)\")\nfeatures$height <- 0.03\nfeatures$fill <- \"lightblue\"\nhead(features)\nlolliplot(sample.gr, features, ylab = \"Allele Frequency (%)\")\n# Generate random dbsnp IDs\ndbsnp_ids <- paste0(\"rs\", sample(239283:532801, length(sample.gr)))\n\n# Add names to the IRanges object within the GRanges\nsample.gr <- setNames(sample.gr, dbsnp_ids)\n\nlolliplot(sample.gr, features, ylab = \"Allele Frequency (%)\")\neffect <-       c(\"MODERATE\", \"LOW\", \"MODIFIER\", \"HIGH\")\neffect.color <- c(\"orange\",   \"blue\",\"green\",    \"red\")\n\n# Randomly select an effect for each variant\nsample.gr$effect <- effect[sample(1:4, length(sample.gr), replace = TRUE)]\n\n# Given the effect, get the matching color\nsample.gr$color <- effect.color[match(sample.gr$effect, effect)]\n\nlolliplot(sample.gr, features, ylab = \"Allele Frequency (%)\")"},{"path":"presentation.html","id":"galaxy-workflow","chapter":"Week 5 Presentation","heading":"5.1 Galaxy Workflow","text":"Now completed analysis steps can create Galaxy workflow. workflow combine tools used Galaxy (FastQ files –> SnpEff/SnpSift annotated output) receive new patient data future can analyze dataset single click!many online resources giving instructions examples creating Galaxy workflows, use resources create workflow including used analysis tools. Note can convert Galaxy histories workflow(s), saves lot time configuring tools workfow.workflow, make sure shared project partner create screenshot report (try fit tools single image).Note; assignment low priority done satisfied parts work! bare minimum, open last history (including SnpEff/SnpSift) explore/ play Extract Workflow option.","code":""},{"path":"presentation.html","id":"comparative-genomics-optional","chapter":"Week 5 Presentation","heading":"5.2 Comparative Genomics [OPTIONAL]","text":"complete analysis nicely packaged single workflow, one thing can use comparative genomics. term contains many different types comparisons described Wikipedia asComparative genomics field biological research genomic features different organisms compared.features can many types case variants. simple tool available Galaxy called VCF-VCFintersect performs either intersection union two VCF datasets containing variant data. tool compares two VCF files retains either shared variants (intersection) variants combined (union) shown diagram .Optional AssignmentProcess another patient sample (use new history) running complete workflow.\nNote filter resulting SnpEff output (contains data VCF file appended annotation data) BED-data. Alternatively, can stop LoFreq tool, download VCF file, filter using BED-data re-upload filtered VCF file continuing SnpEff\nNote filter resulting SnpEff output (contains data VCF file appended annotation data) BED-data. Alternatively, can stop LoFreq tool, download VCF file, filter using BED-data re-upload filtered VCF file continuing SnpEffCalculate following three statistics:\nnumber variants unique patient 1\nnumber variants unique patient 2\nnumber variants found patients\nnumber variants unique patient 1The number variants unique patient 2The number variants found patientsCreate VENN-diagram (like image ) displaying numbers.","code":""}]
